package com.noom.interview.fullstack.sleep.model;

import org.junit.jupiter.api.Test;
import java.time.LocalDate;
import java.time.LocalDateTime;
import static org.junit.jupiter.api.Assertions.*;

public class SleepLogTest {

    // Sample data for testing
    private static final Long USER_ID = 1L;
    private static final LocalDate SLEEP_DATE = LocalDate.of(2023, 10, 15);
    private static final LocalDateTime TIME_IN_BED_START = LocalDateTime.of(2023, 10, 15, 22, 0);
    private static final LocalDateTime TIME_IN_BED_END = LocalDateTime.of(2023, 10, 16, 6, 0);
    private static final Integer TOTAL_TIME_IN_BED = 480; // 8 hours in minutes
    private static final MorningFeeling MORNING_FEELING = MorningFeeling.GOOD;

    // Test MorningFeeling Enum
    @Test
    public void testMorningFeelingEnumValues() {
        // Verify that the enum contains exactly the expected values
        MorningFeeling[] expectedValues = { MorningFeeling.BAD, MorningFeeling.OK, MorningFeeling.GOOD };
        assertArrayEquals(expectedValues, MorningFeeling.values(),
                "MorningFeeling enum should have BAD, OK, and GOOD values");
    }

    // Test SleepLog no-argument constructor
    @Test
    public void testSleepLogNoArgsConstructor() {
        SleepLog sleepLog = new SleepLog();
        assertNotNull(sleepLog, "SleepLog instance should be created with no-args constructor");
        // Properties should be null or default since not initialized
        assertNull(sleepLog.getId(), "ID should be null initially");
        assertNull(sleepLog.getUserId(), "User ID should be null initially");
        assertNull(sleepLog.getSleepDate(), "Sleep date should be null initially");
        assertNull(sleepLog.getTimeInBedStart(), "Time in bed start should be null initially");
        assertNull(sleepLog.getTimeInBedEnd(), "Time in bed end should be null initially");
        assertNull(sleepLog.getTotalTimeInBed(), "Total time in bed should be null initially");
        assertNull(sleepLog.getMorningFeeling(), "Morning feeling should be null initially");
    }

    // Test SleepLog all-argument constructor
    @Test
    public void testSleepLogAllArgsConstructor() {
        SleepLog sleepLog = new SleepLog(USER_ID, SLEEP_DATE, TIME_IN_BED_START, TIME_IN_BED_END,
                TOTAL_TIME_IN_BED, MORNING_FEELING);

        assertNotNull(sleepLog, "SleepLog instance should be created with all-args constructor");
        assertEquals(USER_ID, sleepLog.getUserId(), "User ID should match");
        assertEquals(SLEEP_DATE, sleepLog.getSleepDate(), "Sleep date should match");
        assertEquals(TIME_IN_BED_START, sleepLog.getTimeInBedStart(), "Time in bed start should match");
        assertEquals(TIME_IN_BED_END, sleepLog.getTimeInBedEnd(), "Time in bed end should match");
        assertEquals(TOTAL_TIME_IN_BED, sleepLog.getTotalTimeInBed(), "Total time in bed should match");
        assertEquals(MORNING_FEELING, sleepLog.getMorningFeeling(), "Morning feeling should match");
        assertNull(sleepLog.getId(), "ID should be null as itâ€™s generated by the database");
    }

    // Test SleepLog getters and setters
    @Test
    public void testSleepLogGettersAndSetters() {
        SleepLog sleepLog = new SleepLog();

        // Set values
        sleepLog.setId(1L);
        sleepLog.setUserId(USER_ID);
        sleepLog.setSleepDate(SLEEP_DATE);
        sleepLog.setTimeInBedStart(TIME_IN_BED_START);
        sleepLog.setTimeInBedEnd(TIME_IN_BED_END);
        sleepLog.setTotalTimeInBed(TOTAL_TIME_IN_BED);
        sleepLog.setMorningFeeling(MORNING_FEELING);

        // Verify getters
        assertEquals(1L, sleepLog.getId(), "ID should match set value");
        assertEquals(USER_ID, sleepLog.getUserId(), "User ID should match set value");
        assertEquals(SLEEP_DATE, sleepLog.getSleepDate(), "Sleep date should match set value");
        assertEquals(TIME_IN_BED_START, sleepLog.getTimeInBedStart(), "Time in bed start should match set value");
        assertEquals(TIME_IN_BED_END, sleepLog.getTimeInBedEnd(), "Time in bed end should match set value");
        assertEquals(TOTAL_TIME_IN_BED, sleepLog.getTotalTimeInBed(), "Total time in bed should match set value");
        assertEquals(MORNING_FEELING, sleepLog.getMorningFeeling(), "Morning feeling should match set value");
    }

    // Test handling of null values where allowed
    @Test
    public void testSleepLogWithNullValues() {
        SleepLog sleepLog = new SleepLog(null, null, null, null, null, null);

        assertNull(sleepLog.getUserId(), "User ID should accept null");
        assertNull(sleepLog.getSleepDate(), "Sleep date should accept null");
        assertNull(sleepLog.getTimeInBedStart(), "Time in bed start should accept null");
        assertNull(sleepLog.getTimeInBedEnd(), "Time in bed end should accept null");
        assertNull(sleepLog.getTotalTimeInBed(), "Total time in bed should accept null");
        assertNull(sleepLog.getMorningFeeling(), "Morning feeling should accept null");
    }
}